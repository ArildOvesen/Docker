version: "3.7"

########################### NETWORKS
networks:
  docker_default:
    external:
      name: docker_default
  default:
    driver: bridge

########################### SERVICES
services:

# watchtower 
  NzbGet:
    container_name: NzbGet
    image: containrrr/watchtower:latest
    restart: unless-stopped
    networks:
      - docker_default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ



# nzbget 
  NzbGet:
    container_name: NzbGet
    image: ghcr.io/linuxserver/nzbget:latest
    restart: unless-stopped
    networks:
      - docker_default

    volumes:
      - ${USERDIR}/docker/nzbget:/config
      - ${USERDIR}/docker/downloads:/downloads
      - ${USERDIR}/docker//nzbInter:/nzbInter
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    ports:
      - "6789:6789"

    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbget-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME`)"
      - "traefik.http.routers.nzbget-rtr.tls=true"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"
      - "traefik.docker.network=docker_default"

  jellyfin:
    image: ghcr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
#      - JELLYFIN_PublishedServerUrl=192.168.1.64 #optional
    volumes:
      - ${USERDIR}/docker/jellyfin:/config
      - ${USERDIR}/docker/downloads:/downloads
      - ${USERDIR}/docker/tv:/data/tvshows
      - ${USERDIR}/docker/movies:/data/movies
      - ${USERDIR}/docker/music:/data/music
#      - /opt/vc/lib:/opt/vc/lib #optional
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
#      - 1900:1900/udp #optional
#    devices:
#      - /dev/dri:/dev/dri #optional
#      - /dev/vcsm:/dev/vcsm #optional
#      - /dev/vchiq:/dev/vchiq #optional
#      - /dev/video10:/dev/video10 #optional
#      - /dev/video11:/dev/video11 #optional
#      - /dev/video12:/dev/video12 #optional
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.jellyfin-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr-bypass.priority=98"
      ## HTTP Routers Auth
      - "traefik.http.routers.jellyfin-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`jellyfin.$DOMAINNAME`)"
      - "traefik.http.routers.jellyfin-rtr.tls=true"
      - "traefik.http.routers.jellyfin-rtr.priority=98"
      ## Middlewares
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.routers.jellyfin-rtr-bypass.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096"
      - "traefik.docker.network=docker_default"


# All services / apps go below this line
# Google OAuth - Single Sign On using OAuth 2.0 for Traefik 2.2
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: unless-stopped
    networks:
      - docker_default
#    security_opt:
#      - no-new-privileges:true
    volumes:
      - ${USERDIR}/docker/oauth:/config
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL,$MY_EMAIL2,$MY_EMAIL3,$MY_EMAIL4,$MY_EMAIL5,$MY_EMAIL6,$MY_EMAIL7,$MY_EMAIL8,$MY_EMAIL9
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

# Nzbhydra2 
  NzbNydra2:
    container_name: NzbHydra2
    image: ghcr.io/linuxserver/nzbhydra2:latest
    restart: unless-stopped
    networks:
      - docker_default

    volumes:
      - ${USERDIR}/docker/nzbhydra2:/config
      - ${USERDIR}/docker/downloads:/downloads
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    ports:
      - "5076:5076"

    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbhydra2-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.nzbhydra2-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbhydra2-rtr.entrypoints=https"
      - "traefik.http.routers.nzbhydra2-rtr.rule=Host(`nzbhydra2.$DOMAINNAME`)"
      - "traefik.http.routers.nzbhydra2-rtr.tls=true"
      - "traefik.http.routers.nzbhydra2-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbhydra2-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbhydra2-rtr.service=nzbhydra2-svc"
      - "traefik.http.routers.nzbhydra2-rtr-bypass.service=nzbhydra2-svc"
      - "traefik.http.services.nzbhydra2-svc.loadbalancer.server.port=5076"
      - "traefik.docker.network=docker_default"

# Tautulli Plex Statistics
  Tautulli:
    container_name: Tautulli
    image: ghcr.io/linuxserver/tautulli:latest
    restart: unless-stopped
    networks:
      - docker_default

    volumes:
      - ${USERDIR}/docker/tautulli:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    ports:
      - "8181:8181"

    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.Tautulli-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.Tautulli-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.Tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.Tautulli-rtr.rule=Host(`Tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.Tautulli-rtr.tls=true"
      - "traefik.http.routers.Tautulli-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.Tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.Tautulli-rtr.service=Tautulli-svc"
      - "traefik.http.routers.Tautulli-rtr-bypass.service=Tautulli-svc"
      - "traefik.http.services.Tautulli-svc.loadbalancer.server.port=8181"
      - "traefik.docker.network=docker_default"

# jackett Plex Statistics
  jackett:
    container_name: Jackett
    image: ghcr.io/linuxserver/jackett:latest
    restart: unless-stopped
    networks:
      - docker_default

    volumes:
      - ${USERDIR}/docker/jackett:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    ports:
      - "9117:9117"

    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.jackett-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.jackett-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME`)"
      - "traefik.http.routers.jackett-rtr.tls=true"
      - "traefik.http.routers.jackett-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.routers.jackett-rtr-bypass.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"
      - "traefik.docker.network=docker_default"


## Sonarr
  sonarr:
    image: "linuxserver/sonarr:latest"
    container_name: "sonarr"
    volumes:
      - ${USERDIR}/docker/sonarr:/config
      - ${USERDIR}/docker/downloads:/downloads
      - ${USERDIR}/docker/tv:/tv
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "8989:8989"
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
#      - "traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`)"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.tls=true"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
#      - "traefik.http.routers.sonarr-rtr.middlewares=middlewares-basic-auth@file"
#      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
#      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
      - "traefik.docker.network=docker_default"


## Portainer
  portainer:
    image: "portainer/portainer-ce:latest"
    container_name: "portainer"
    volumes:
      - "${USERDIR}/docker/portainer:/data portainer/portainer-ce"
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "9000:9000"
      - "8000:8000"
    restart: always
    environment:
#      - PUID=$PUID
#      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.portainer-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.portainer-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      - "traefik.http.routers.portainer-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.routers.portainer-rtr-bypass.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
      - "traefik.docker.network=docker_default"

## Radarr
  radarr:
    image: "linuxserver/radarr:latest"
    container_name: "radarr"
    volumes:
      - ${USERDIR}/docker/radarr:/config
      - ${USERDIR}/docker/downloads:/downloads
      - ${USERDIR}/docker/movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "7878:7878"
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.tls=true"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
      - "traefik.docker.network=docker_default"

## lidarr
  lidarr:
    image: "linuxserver/lidarr:latest"
    container_name: "lidarr"
    volumes:
      - ${USERDIR}/docker/lidarr:/config
      - ${USERDIR}/docker/downloads:/downloads
      - ${USERDIR}/docker/music:/music
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "8686:8686"
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAINNAME`)"
      - "traefik.http.routers.lidarr-rtr.tls=true"
      - "traefik.http.routers.lidarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.lidarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      - "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"
      - "traefik.docker.network=docker_default"

  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
    volumes:
      - ${USERDIR}/docker/transmission:/config
      - ${USERDIR}/docker/downloads:/downloads
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
 
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.transmission-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.transmission-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.transmission-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-rtr.rule=Host(`transmission.$DOMAINNAME`)"
      - "traefik.http.routers.transmission-rtr.tls=true"
      - "traefik.http.routers.transmission-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.transmission-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.transmission-rtr.service=transmission-svc"
      - "traefik.http.routers.transmission-rtr-bypass.service=transmission-svc"
      - "traefik.http.services.transmission-svc.loadbalancer.server.port=9091"
      - "traefik.docker.network=docker_default"


## plex
  plex:
    image: "linuxserver/plex:latest"
    container_name: "plex"
    network_mode: host

#    ports:
#      - 32400:32400/tcp
#      - 32400:32400/udp
#      - 3005:3005/tcp
#      - 8324:8324/tcp
#      - 32469:32469/tcp
#      - 1900:1900/udp
#      - 32410:32410/udp
#      - 32412:32412/udp
#      - 32413:32413/udp
#      - 32414:32414/udp

    volumes:
      - ${USERDIR}/docker/plex:/config
      - ${USERDIR}/docker/tv:/tv
      - ${USERDIR}/docker/plex/transcode:/transcode
      - ${USERDIR}/docker/plex/data:/data
      - ${USERDIR}/docker/music:/music
      - ${USERDIR}/docker/movies:/movies
      - /media/5tb/photos/photos:/photos
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    restart: unless-stopped
    environment:
      - ADVERTISE_IP=https://plex.ovesen.io:443
      - PUID=1001
      - PGID=1002
      - TZ=$TZ
      - VERSION=docker
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.ovesen.io`)"
      - "traefik.http.routers.plex.entrypoints=https"
      - "traefik.http.routers.plex.tls.certresolver=mydnschallenge"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"


# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:latest # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
#    user: 1001:1002
    restart: unless-stopped

    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
#      - --entryPoints.web.address=:80
      - --entryPoints.https.address=:443
#      - --entryPoints.websecure.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=docker_default
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare

#    networks:
#      t2_proxy:
#        ipv4_address: 192.168.90.254 # You can specify a static IP
    networks:
      - docker_default

#    security_opt:
#      - no-new-privileges:true

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host

    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared

    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY

    labels:
      - "traefik.enable=true"

      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
#      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain

      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"

      ## Middlewares
#      - "traefik.http.routers.sonarr-docker.middlewares=middlewares-basic-auth@file" 
#      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-secure-headers@file,middlewares-rate-limit@file,middlewares-basic-auth@file" 
#      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 
#      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
## Router      
      - "traefik.http.routers.edgerouter.entrypoints=https"
      - "traefik.http.routers.edgerouter.rule=Host(`router.ovesen.io`)"
      - "traefik.http.routers.edgerouter.tls=true"
      - "traefik.http.routers.edgerouter.middlewares=chain-oauth@file"
#      - "traefik.http.routers.edgerouter.service=sonarr-svc"
#      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
#      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
      - "traefik.docker.network=docker_default"

